spring.config.import=optional:file:.env[.properties]
spring.datasource.url=jdbc:mysql://localhost:3306/${DB_NAME}?createDatabaseIfNotExist=true
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_USERPASSWORD}
spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=never

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent
# Customize the login page URL to include access_type=offline
spring.security.oauth2.client.registration.google.authorization-uri-template=https://accounts.google.com/o/oauth2/auth?access_type=offline&response_type=code&client_id={clientId}&scope={scopes}&state={state}&redirect_uri={redirectUri}


weather.api.url=http://api.weatherapi.com/v1/current.json
weather.api.key=${WEATHER_API_KEY}

app.base-url=http://localhost:8080/

company.name=Easy to build

# JWT Configuration
# 256 bits
jwt.secret=${JWT_SECRET} 
jwt.expiration.ms=86400000